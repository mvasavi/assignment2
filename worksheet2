import math
import random

random.seed(1) # This line fixes the value called by your function,
               # and is used for answer-checking.

def rand():
   return random.uniform(-1, 1)

x=rand()
print(x)

def distance(x, y): #x,y are points 
    dist = math.sqrt((x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 )#In our case here, the first point is x=(x[0],x[1])
    #and the second point is y=(y[0],y[1]). Therefore, the distance between two points is given by:
        #distance = sqrt((x[0]-y[0])^2+(x[1]-y[1])^2)
    return dist
    
print(distance((0,0),(1,1)))

def in_circle(x, origin = (0,0)): #Python, like other languages, provides support for default argument values, 
  #that is function arguments that can either be specified by the caller or left blank to automatically receive a predefined value.
  #In our case here we pre-defined the origin of the unit circle to be (0,0)
   return distance(x, origin) < 1

print(in_circle((1,1),(0,0))) #This results False as the point resides outside the unit circle. 

R = 10000
x = [ (rand(), rand()) for i in range(R) ]
inside = [ in_circle(p) for p in x ]
print(sum(inside) / R)
print( (math.pi / 4) - (sum(inside) / R) )

import random

random.seed(1) #Initialize the basic random number generator.

def moving_window_average(x, n_neighbors=1):
    n = len(x)
    width = n_neighbors*2 + 1
    x = [x[0]]*n_neighbors + x + [x[-1]]*n_neighbors
    # To complete the function,
    # return a list of the mean of values from i to i+width for all values i from 0 to n-1.
    
    return [sum(x[i:(i+width)]) / width for i in range(n)]
    
    

    
x=[0,10,5,3,1,5]
print(moving_window_average(x, 1))

random.seed(1) # This line fixes the value called by your function,
               # and is used for answer-checking.
    
# write your code here!
    
R = 1000
x = [random.uniform(0, 1) for i in range(0, 1000)] #Return a random floating point number N such that
   #a <= N <= b for a <= b 
   #and b <= N <= a for b < a.
Y = [x] + [moving_window_average(x, n_neighbors) for n_neighbors in range(1, 10)]
print(len(Y))
ranges = [max(x)-min(x) for x in Y]
print(ranges) 
#
